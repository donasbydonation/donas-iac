#!/bin/bash

# - Confirmation
ANS='sync_gh_secrets'
echo "Type '$ANS' to continue: "
read
if [[ $REPLY != $ANS ]]; then
    echo "INFO: Cancel."
    exit 0
fi

# - Env
ROOT_DIR=${ROOT_DIR?"ERROR: Required environment variable not set."}
source $ROOT_DIR/.env.config
source $ROOT_DIR/.env.credentials

# - Constant
REGEX='.+[$]{{ secrets[.](.+) }}$'
GH_R="$GH_OWNER/$GH_REPO"

# - Func configs
GH_SECRET_GET_PATH="$ROOT_DIR/.helpers.donas.me/github/workflows/secret/get.sh.d"
ENV_OUT="$ROOT_DIR/.env.autogen.gh-secrets"

function get_sec_list() {
    cat $ROOT_DIR/.github/workflows/*.yaml \
        | sed -E 's/([$]{{ secrets[.][A-Z_]+ }})/\1\n/g' \
        | grep -E '[$]{{ secrets[.][A-Z_]+ }}' \
        | sed -E 's/.*[$]{{ secrets[.]([A-Z_]+) }}.*/\1/g' \
        | sort -u
}

# - Gen .env file
cat << EOF > $ENV_OUT
#!/bin/bash

# THIS .env FILE IS AUTOGENERATED AT TIME: $(date)
# THIS FILE SHOULD NOT BE CHANGED MANUALLY AND
# SHOULD IGNORED BY '.gitignore'

EOF

# - Clear gh secrets
echo "INFO: Clearing gh secrets"
for name in $(gh secret -R $GH_R list | awk '{print $1}'); do
    gh secret -R $GH_R delete $name
done

# - Set gh secrets
echo "INFO: Setting gh secrets"
for name in $(get_sec_list); do
    if [[ -f $GH_SECRET_GET_PATH/$name.sh ]]; then
        value=$($GH_SECRET_GET_PATH/$name.sh)
    elif `printenv $name &> /dev/null`; then
        value=$(printenv $name)
    else
        echo "ERROR: Value for the secret $name not exists" 1>&2; return 1
    fi

    echo "export $name='$value'" >> $ENV_OUT
    gh secret -R $GH_R set $name -b $value
done
